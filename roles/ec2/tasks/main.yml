- name: Create web security group
  ec2_group:
    name: "Web Security Group"
    description: "web security group"
    region: "{{ aws_region }}"
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp  # ssh
        from_port: 22
        to_port: 22
        cidr_ip: "{{ public_subnet_1_cidr }}"
      - proto: tcp  # http
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # https
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: web_sg
  
- name: Set Web SG ID
  set_fact:
      web_sg_id: "{{ web_sg.group_id }}"
  
- name: Create db security group
  ec2_group:
      name: "Db Security Group"
      description: "db security group"
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc_id }}"
      rules:
        - proto: tcp  # ssh
          from_port: 22
          to_port: 22
          cidr_ip: "{{ public_subnet_1_cidr }}"
        - proto: "tcp"
          from_port: "3306"
          to_port: "3306"
          group_id: "{{ web_sg_id }}"
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
  register: db_sg

- name: Set Db SG ID
  set_fact:
      db_sg_id: "{{ db_sg.group_id }}"

- name: Create bastion security group
  ec2_group:
      name: "Bastion Security Group"
      description: "bastion security group"
      region: "{{ aws_region }}"
      vpc_id: "{{ vpc_id }}"
      rules:
        - proto: tcp  # ssh
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
  register: bastion_sg

- name: Set Bastion SG ID
  set_fact:
      bastion_sg_id: "{{ bastion_sg.group_id }}"

- name: Create an web_1 EC2 instance
  ec2:
    key_name: "{{ keypair }}"
    region: "{{ aws_region }}"
    group_id: "{{ web_sg_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    exact_count: 1  #default
    count_tag:
       Name: "web_1"
    instance_tags:
       Name: "web_1"
    wait: yes
    vpc_subnet_id: "{{ public_subnet_az1_id }}"
    assign_public_ip: yes
    user_data: "{{ lookup('file', 'user_data.sh') }}"
  register: web
 
- name: Create an db_1 EC2 instance
  ec2:
    key_name: "{{ keypair }}"
    region: "{{ aws_region }}"
    group_id: "{{ db_sg_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    exact_count: 1  #default
    count_tag:
       Name: "db_1"
    instance_tags:
       Name: "db_1"
    wait: yes
    vpc_subnet_id: "{{ private_subnet_az1_id }}"
    assign_public_ip: no
    user_data: "{{ lookup('file', 'user_data.sh') }}"
  register: db

- name: Create bastionhost instance.
  ec2:
    key_name: "{{ keypair }}"
    region: "{{ aws_region }}"
    group_id: "{{ bastion_sg_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    exact_count: 1  #default
    count_tag:
       Name: "bastion_1"
    instance_tags:
       Name: "bastion_1"
    wait: yes
    vpc_subnet_id: "{{ public_subnet_az1_id }}"
    assign_public_ip: yes
    source_dest_check: no
    user_data: "{{ lookup('file', 'user_data.sh') }}"
  register: bastion

- name: Add new instance to host group
  add_host:
    hostname: "{{ item.private_ip }}"
    groupname: web, ec2
  with_items: "{{ web.instances }}"

- name: Add new instance to host group
  add_host:
    hostname: "{{ item.private_ip }}"
    groupname: db, ec2
  with_items: "{{ db.instances }}"
  
- name: Add new instance to host group
  add_host:
    hostname: "{{ item.private_ip }}"
    groupname: bastion, ec2
  with_items: "{{ bastion.instances }}"

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 60
    timeout: 320
    state: started
  with_items: "{{ ec2.instances }}"

     
